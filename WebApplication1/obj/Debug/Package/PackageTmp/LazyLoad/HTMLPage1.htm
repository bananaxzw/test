<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="../jquery-1.6.min.js" type="text/javascript"></script>
    <script type="text/javascript">

        var LazyLoad = function (elems, options) {
            this.Defualts = {//默认值
                container: window, //容器
                mode: "dynamic", //模式
                threshold: 0, //加载范围阈值
                delay: 100, //延时时间
                beforeLoad: function () { }, //加载前执行
                onLoadData: function () { } //显示加载数据
            };
            //初始化程序
            this._initialize(elems, options);
        };
        LazyLoad.prototype = {
            //初始化程序 用_initContainer程序初始化容器对象。
            _initialize: function (elems, options) {
                this._elems = elems; //加载元素集合
                this._rect = {}; //容器位置参数对象 即容器的上下左右坐标
                this._range = {}; //加载范围参数对象 也就是当滚动条滚动时候 加载范围变化了
                this._loadData = null; //加载程序 采用静态加载 还是动态加载  在_load里面执行
                this._timer = null; //定时器
                this._lock = false; //延时锁定
                //静态使用属性
                this._index = 0; //记录索引
                this._direction = 0; //记录方向
                this._lastScroll = { "left": 0, "top": 0 }; //记录滚动值
                this._setElems = function () { }; //重置元素集合程序

                var opt = $.extend(this.Defualts, options);

                this.delay = opt.delay; //延时多少
                this.threshold = opt.threshold;
                this.beforeLoad = opt.beforeLoad;  //加载前事件 在_load里面执行

                this._onLoadData = opt.onLoadData;
                this._container = this._initContainer($$(this.options.container)); //容器
            },
            //初始化容器设置
            _initContainer: function (container) {
                var doc = document,
		isWindow = (container == window || container == doc || !container.tagName || (/^(?:body|html)$/i).test(container.tagName));
                if (isWindow) {
                    container = doc.compatMode == 'CSS1Compat' ? doc.documentElement : doc.body;
                }
                //定义执行方法
                var oThis = this, width = 0, height = 0;
                this.load = $$F.bind(this._load, this); //定义好load跟_load绑定
                this.resize = $$F.bind(this._resize, this); //resize跟_relize绑定
                this.delayLoad = function () { oThis._delay(oThis.load); }; //延时加载程序
                this.delayResize = function () {//防止重复触发bug
                    var clientWidth = container.clientWidth,
			clientHeight = container.clientHeight;
                    if (clientWidth != width || clientHeight != height) {
                        width = clientWidth; height = clientHeight;
                        oThis._delay(oThis.resize);
                    }
                };
                //记录绑定元素方便移除
                this._binder = isWindow ? window : container;
                //绑定事件 滚动时候和relize时候触发
                $$E.addEvent(this._binder, "scroll", this.delayLoad);
                isWindow && $$E.addEvent(this._binder, "resize", this.delayResize);
                //获取容器位置参数函数 上下左右的坐标 也就是_rect
                this._getContainerRect = isWindow && ("innerHeight" in window)
		? function () {
		    return {
		        "left": 0, "right": window.innerWidth,
		        "top": 0, "bottom": window.innerHeight
		    }
		}
		: function () { return oThis._getRect(container); };
                //设置获取scroll值函数
                this._getScroll = isWindow
		? function () {
		    return {
		        "left": $$D.getScrollLeft(), "top": $$D.getScrollTop()
		    }
		}
		: function () {
		    return {
		        "left": container.scrollLeft, "top": container.scrollTop
		    }
		};
                return container;
            }

        };
      
    
    </script>
</head>
<body>
</body>
</html>
