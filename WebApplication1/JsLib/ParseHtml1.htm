<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="SL.Core.js" type="text/javascript"></script>
    <script src="SL.Dom.js" type="text/javascript"></script>
    <script src="SL.support.js" type="text/javascript"></script>
    <script type="text/javascript">
        uu = new SL();
        function parseHTMLNew1(elems, doc, fragment, scripts) {
            /*处理tr opotion table这种直接div下设置innerhtml无效*/
            var wrapMap = {
                option: [1, "<select multiple='multiple'>", "</select>"],
                legend: [1, "<fieldset>", "</fieldset>"],
                thead: [1, "<table>", "</table>"],
                tr: [2, "<table><tbody>", "</tbody></table>"],
                td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
                area: [1, "<map>", "</map>"],
                _default: [0, "", ""]
            };
            wrapMap.optgroup = wrapMap.option, 
            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead,
            wrapMap.th = wrapMap.td;
            doc = doc || document;
            if (typeof doc.createElement === "undefined") {
                doc = doc.ownerDocument || doc[0] && doc[0].ownerDocument || document;
            }
            //返回节点集
            var ret = [];
            uu.each(elems, function (i, elem) {
                if (typeof elem === "number") {
                    elem += "";
                }

                if (!elem) {
                    return;
                }
                //直接文本
                if (typeof elem === "string" && !/<|&\w+;/.test(elem)) {
                    elem = doc.createTextNode(elem);
                } else if (typeof elem === "string") {
                    // Fix "XHTML"-style tags in all browsers
                    elem = elem.replace(/(<([\w:]+)[^>]*?)\/>/g, fcloseTag = function (all, front, tag) {
                        return /^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i.test(tag) ? all : front + "></" + tag + ">";
                    });
                    // 获取 tag名 小写
                    var tag = (/<([\w:]+)/.exec(elem) || ["", ""])[1].toLowerCase(),
                    //处理tr opotion table这种直接div下设置innerhtml无效
					wrap = wrapMap[tag] || wrapMap._default,
					depth = wrap[0],
					div = doc.createElement("div");
                    // 处理tr opotion table这种直接div下设置innerhtml无效 包裹
                    div.innerHTML = wrap[1] + elem + wrap[2];
                    // Move to the right depth
                    while (depth--) {
                        div = div.lastChild;
                    }
                    // ie6 ie7会在table下自动添加  <tbody>  需要移除不然<thead></thead>会返回<thead></thead><tbody></tbody>
                    if (!uu.support.tbody) {
                        // 如果string是table可能自动产生tbody
                        var hasBody =  /<tbody/i.test(elem),
						tbody = tag === "table" && !hasBody ?
							div.firstChild && div.firstChild.childNodes :
                        // String=<thead> or <tfoot> 可能自动产生tbody
							wrap[1] === "<table>" && !hasBody ?
								div.childNodes :
								[];
                        for (var j = tbody.length - 1; j >= 0; --j) {
                            if (/tbody/i.test(tbody[j].nodeName) && !tbody[j].childNodes.length) {
                                tbody[j].parentNode.removeChild(tbody[j]);
                            }
                        }

                    }

                    //  IE6-ie8 innerHTML会自动删除开头空格 补充上
                    if (!uu.support.leadingWhitespace && /^\s+/.test(elem)) {
                        div.insertBefore(doc.createTextNode(/^\s+/.exec(elem)[0]), div.firstChild);
                    }
                    elem = uu.Convert.convertToArray(div.childNodes);
                }
                if (elem.nodeType) {
                    ret.push(elem);
                } else {
                    ret = uu.merge(ret, elem);
                }
            });
            /*附加到fragment并分离出srcipt*/
            if (fragment) {
                for (var i = 0; ret[i]; i++) {
                    if (scripts && /script/i.test(ret[i].nodeName) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript")) {
                        scripts.push(ret[i].parentNode ? ret[i].parentNode.removeChild(ret[i]) : ret[i]);
                    } else {
                        if (ret[i].nodeType === 1) {
                            ret.splice.apply(ret, [i + 1, 0].concat(uu.Convert.convertToArray(ret[i].getElementsByTagName("script"))));
                        }
                        fragment.appendChild(ret[i]);
                    }
                }
            }

            return ret;
        }

        function domIns(args, table, fn) {

            if (this[0]) {
                var fragment = (this[0].ownerDocument || this[0]).createDocumentFragment(),
				scripts = jQuery.clean(args, (this[0].ownerDocument || this[0]), fragment),
				first = fragment.firstChild,
				extra = this.length > 1 ? fragment.cloneNode(true) : fragment;

                if (first)
                    for (var i = 0, l = this.length; i < l; i++)
                        callback.call(root(this[i], first), i > 0 ? extra.cloneNode(true) : fragment);

                if (scripts)
                    jQuery.each(scripts, evalScript);
            }

            return this;

            function root(elem, cur) {
                return table && jQuery.nodeName(elem, "table") && jQuery.nodeName(cur, "tr") ?
				(elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
				elem;
            }
        }
    
    
    </script>
</head>
<body>
    <table>
        <tbody id="sfsa">
        </tbody>
    </table>
    <div id="fgh">
    </div>
    <div></div>
        <select id="ty">
        </select>
        <script type="text/javascript">
            var f = document.createDocumentFragment();
            parseHTMLNew1(["<option value='1'>s</option>"], "", f, []);
            //  document.getElementById("sfsa").appendChild(parseHTMLNew1("<tr><td>ss<td></tr>"));
            document.getElementById("ty").appendChild(f);
            //insertAdjacentHTML(document.getElementById("ty"), "beforeend", "<option value='1'>s</option>");
            // insertAdjacentHTML(document.getElementById("sfsa"), "afterbegin", "<tr><td>ss<td></tr>");
            // insertAdjacentHTML(document.getElementById("fgh"), "afterbegin", "<p>ss</p><p>ss</p>");
            //  parseHTMLNew("<tr><td>ss<td></tr>");
        </script>
</body>
</html>
